// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ExclusiveNFTCreated extends ethereum.Event {
  get params(): ExclusiveNFTCreated__Params {
    return new ExclusiveNFTCreated__Params(this);
  }
}

export class ExclusiveNFTCreated__Params {
  _event: ExclusiveNFTCreated;

  constructor(event: ExclusiveNFTCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get unrevealURI(): string {
    return this._event.parameters[2].value.toString();
  }

  get premiumNFT(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ExclusiveFactory extends ethereum.SmartContract {
  static bind(address: Address): ExclusiveFactory {
    return new ExclusiveFactory("ExclusiveFactory", address);
  }

  deployExclusiveToken(
    name: string,
    symbol: string,
    unrevealURI: string,
    premiumNFT: Address
  ): Address {
    let result = super.call(
      "deployExclusiveToken",
      "deployExclusiveToken(string,string,string,address):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromString(unrevealURI),
        ethereum.Value.fromAddress(premiumNFT)
      ]
    );

    return result[0].toAddress();
  }

  try_deployExclusiveToken(
    name: string,
    symbol: string,
    unrevealURI: string,
    premiumNFT: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployExclusiveToken",
      "deployExclusiveToken(string,string,string,address):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromString(unrevealURI),
        ethereum.Value.fromAddress(premiumNFT)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalCollection(): BigInt {
    let result = super.call(
      "getTotalCollection",
      "getTotalCollection():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalCollection(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalCollection",
      "getTotalCollection():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokens(param0: BigInt): Address {
    let result = super.call("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DeployExclusiveTokenCall extends ethereum.Call {
  get inputs(): DeployExclusiveTokenCall__Inputs {
    return new DeployExclusiveTokenCall__Inputs(this);
  }

  get outputs(): DeployExclusiveTokenCall__Outputs {
    return new DeployExclusiveTokenCall__Outputs(this);
  }
}

export class DeployExclusiveTokenCall__Inputs {
  _call: DeployExclusiveTokenCall;

  constructor(call: DeployExclusiveTokenCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get unrevealURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get premiumNFT(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class DeployExclusiveTokenCall__Outputs {
  _call: DeployExclusiveTokenCall;

  constructor(call: DeployExclusiveTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
