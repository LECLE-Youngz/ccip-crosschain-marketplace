// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ItemBought extends ethereum.Event {
  get params(): ItemBought__Params {
    return new ItemBought__Params(this);
  }
}

export class ItemBought__Params {
  _event: ItemBought;

  constructor(event: ItemBought) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get nftPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get promptPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ItemCanceled extends ethereum.Event {
  get params(): ItemCanceled__Params {
    return new ItemCanceled__Params(this);
  }
}

export class ItemCanceled__Params {
  _event: ItemCanceled;

  constructor(event: ItemCanceled) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ItemListed extends ethereum.Event {
  get params(): ItemListed__Params {
    return new ItemListed__Params(this);
  }
}

export class ItemListed__Params {
  _event: ItemListed;

  constructor(event: ItemListed) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get nftPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get promptPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PromptBought extends ethereum.Event {
  get params(): PromptBought__Params {
    return new PromptBought__Params(this);
  }
}

export class PromptBought__Params {
  _event: PromptBought;

  constructor(event: PromptBought) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get nftPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get promptPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Marketplace__getListingResultValue0Struct extends ethereum.Tuple {
  get nftPrice(): BigInt {
    return this[0].toBigInt();
  }

  get promptPrice(): BigInt {
    return this[1].toBigInt();
  }

  get seller(): Address {
    return this[2].toAddress();
  }
}

export class Marketplace__getPromptPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Marketplace__getTokenPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Marketplace extends ethereum.SmartContract {
  static bind(address: Address): Marketplace {
    return new Marketplace("Marketplace", address);
  }

  getChainlinkDataFeedLatestAnswer(): BigInt {
    let result = super.call(
      "getChainlinkDataFeedLatestAnswer",
      "getChainlinkDataFeedLatestAnswer():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getChainlinkDataFeedLatestAnswer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getChainlinkDataFeedLatestAnswer",
      "getChainlinkDataFeedLatestAnswer():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListPromptBuyers(nftAddress: Address, tokenId: BigInt): Array<Address> {
    let result = super.call(
      "getListPromptBuyers",
      "getListPromptBuyers(address,uint256):(address[])",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getListPromptBuyers(
    nftAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getListPromptBuyers",
      "getListPromptBuyers(address,uint256):(address[])",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getListing(
    nftAddress: Address,
    tokenId: BigInt
  ): Marketplace__getListingResultValue0Struct {
    let result = super.call(
      "getListing",
      "getListing(address,uint256):((uint256,uint256,address))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return changetype<Marketplace__getListingResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getListing(
    nftAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<Marketplace__getListingResultValue0Struct> {
    let result = super.tryCall(
      "getListing",
      "getListing(address,uint256):((uint256,uint256,address))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Marketplace__getListingResultValue0Struct>(value[0].toTuple())
    );
  }

  getPromptPrice(
    nftAddress: Address,
    tokenId: BigInt
  ): Marketplace__getPromptPriceResult {
    let result = super.call(
      "getPromptPrice",
      "getPromptPrice(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return new Marketplace__getPromptPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPromptPrice(
    nftAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<Marketplace__getPromptPriceResult> {
    let result = super.tryCall(
      "getPromptPrice",
      "getPromptPrice(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Marketplace__getPromptPriceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTokenPrice(
    nftAddress: Address,
    tokenId: BigInt
  ): Marketplace__getTokenPriceResult {
    let result = super.call(
      "getTokenPrice",
      "getTokenPrice(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return new Marketplace__getTokenPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getTokenPrice(
    nftAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<Marketplace__getTokenPriceResult> {
    let result = super.tryCall(
      "getTokenPrice",
      "getTokenPrice(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Marketplace__getTokenPriceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  roundToMillion(input: BigInt): BigInt {
    let result = super.call(
      "roundToMillion",
      "roundToMillion(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(input)]
    );

    return result[0].toBigInt();
  }

  try_roundToMillion(input: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roundToMillion",
      "roundToMillion(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(input)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdc(): Address {
    let result = super.call("usdc", "usdc():(address)", []);

    return result[0].toAddress();
  }

  try_usdc(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdc", "usdc():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get link(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get aggregatorAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get usdcAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyItemCall extends ethereum.Call {
  get inputs(): BuyItemCall__Inputs {
    return new BuyItemCall__Inputs(this);
  }

  get outputs(): BuyItemCall__Outputs {
    return new BuyItemCall__Outputs(this);
  }
}

export class BuyItemCall__Inputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyItemCall__Outputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }
}

export class BuyPromptCall extends ethereum.Call {
  get inputs(): BuyPromptCall__Inputs {
    return new BuyPromptCall__Inputs(this);
  }

  get outputs(): BuyPromptCall__Outputs {
    return new BuyPromptCall__Outputs(this);
  }
}

export class BuyPromptCall__Inputs {
  _call: BuyPromptCall;

  constructor(call: BuyPromptCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyPromptCall__Outputs {
  _call: BuyPromptCall;

  constructor(call: BuyPromptCall) {
    this._call = call;
  }
}

export class CancelListingCall extends ethereum.Call {
  get inputs(): CancelListingCall__Inputs {
    return new CancelListingCall__Inputs(this);
  }

  get outputs(): CancelListingCall__Outputs {
    return new CancelListingCall__Outputs(this);
  }
}

export class CancelListingCall__Inputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelListingCall__Outputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }
}

export class ListItemCall extends ethereum.Call {
  get inputs(): ListItemCall__Inputs {
    return new ListItemCall__Inputs(this);
  }

  get outputs(): ListItemCall__Outputs {
    return new ListItemCall__Outputs(this);
  }
}

export class ListItemCall__Inputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get nftPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get promptPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ListItemCall__Outputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }
}

export class UpdateListingCall extends ethereum.Call {
  get inputs(): UpdateListingCall__Inputs {
    return new UpdateListingCall__Inputs(this);
  }

  get outputs(): UpdateListingCall__Outputs {
    return new UpdateListingCall__Outputs(this);
  }
}

export class UpdateListingCall__Inputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newNFTPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get newPromptPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateListingCall__Outputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }
}

export class UpdatePromptPriceCall extends ethereum.Call {
  get inputs(): UpdatePromptPriceCall__Inputs {
    return new UpdatePromptPriceCall__Inputs(this);
  }

  get outputs(): UpdatePromptPriceCall__Outputs {
    return new UpdatePromptPriceCall__Outputs(this);
  }
}

export class UpdatePromptPriceCall__Inputs {
  _call: UpdatePromptPriceCall;

  constructor(call: UpdatePromptPriceCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newPromptPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdatePromptPriceCall__Outputs {
  _call: UpdatePromptPriceCall;

  constructor(call: UpdatePromptPriceCall) {
    this._call = call;
  }
}
