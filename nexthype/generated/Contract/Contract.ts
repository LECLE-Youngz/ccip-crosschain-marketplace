// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PremiumTokenCreated extends ethereum.Event {
  get params(): PremiumTokenCreated__Params {
    return new PremiumTokenCreated__Params(this);
  }
}

export class PremiumTokenCreated__Params {
  _event: PremiumTokenCreated;

  constructor(event: PremiumTokenCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  deployPremiumToken(
    token_uri: string,
    subscriptionPrice: Array<BigInt>
  ): Address {
    let result = super.call(
      "deployPremiumToken",
      "deployPremiumToken(string,uint256[]):(address)",
      [
        ethereum.Value.fromString(token_uri),
        ethereum.Value.fromUnsignedBigIntArray(subscriptionPrice)
      ]
    );

    return result[0].toAddress();
  }

  try_deployPremiumToken(
    token_uri: string,
    subscriptionPrice: Array<BigInt>
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployPremiumToken",
      "deployPremiumToken(string,uint256[]):(address)",
      [
        ethereum.Value.fromString(token_uri),
        ethereum.Value.fromUnsignedBigIntArray(subscriptionPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalPremiumCollection(): BigInt {
    let result = super.call(
      "getTotalPremiumCollection",
      "getTotalPremiumCollection():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalPremiumCollection(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalPremiumCollection",
      "getTotalPremiumCollection():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokens(param0: BigInt): Address {
    let result = super.call("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DeployPremiumTokenCall extends ethereum.Call {
  get inputs(): DeployPremiumTokenCall__Inputs {
    return new DeployPremiumTokenCall__Inputs(this);
  }

  get outputs(): DeployPremiumTokenCall__Outputs {
    return new DeployPremiumTokenCall__Outputs(this);
  }
}

export class DeployPremiumTokenCall__Inputs {
  _call: DeployPremiumTokenCall;

  constructor(call: DeployPremiumTokenCall) {
    this._call = call;
  }

  get token_uri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get subscriptionPrice(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class DeployPremiumTokenCall__Outputs {
  _call: DeployPremiumTokenCall;

  constructor(call: DeployPremiumTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
