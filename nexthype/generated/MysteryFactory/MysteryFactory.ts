// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MysteryEventCreated extends ethereum.Event {
  get params(): MysteryEventCreated__Params {
    return new MysteryEventCreated__Params(this);
  }
}

export class MysteryEventCreated__Params {
  _event: MysteryEventCreated;

  constructor(event: MysteryEventCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MysteryFactory extends ethereum.SmartContract {
  static bind(address: Address): MysteryFactory {
    return new MysteryFactory("MysteryFactory", address);
  }

  deployMysteryEvent(
    name: string,
    symbol: string,
    unrevealedURI: string,
    premiumNFT: Address,
    _nftPurchasedRequired: BigInt,
    maxSupply: BigInt,
    baseURI: string,
    clSubscriptionId: BigInt
  ): Address {
    let result = super.call(
      "deployMysteryEvent",
      "deployMysteryEvent(string,string,string,address,uint64,uint256,string,uint64):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromString(unrevealedURI),
        ethereum.Value.fromAddress(premiumNFT),
        ethereum.Value.fromUnsignedBigInt(_nftPurchasedRequired),
        ethereum.Value.fromUnsignedBigInt(maxSupply),
        ethereum.Value.fromString(baseURI),
        ethereum.Value.fromUnsignedBigInt(clSubscriptionId)
      ]
    );

    return result[0].toAddress();
  }

  try_deployMysteryEvent(
    name: string,
    symbol: string,
    unrevealedURI: string,
    premiumNFT: Address,
    _nftPurchasedRequired: BigInt,
    maxSupply: BigInt,
    baseURI: string,
    clSubscriptionId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployMysteryEvent",
      "deployMysteryEvent(string,string,string,address,uint64,uint256,string,uint64):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromString(unrevealedURI),
        ethereum.Value.fromAddress(premiumNFT),
        ethereum.Value.fromUnsignedBigInt(_nftPurchasedRequired),
        ethereum.Value.fromUnsignedBigInt(maxSupply),
        ethereum.Value.fromString(baseURI),
        ethereum.Value.fromUnsignedBigInt(clSubscriptionId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  events(param0: BigInt): Address {
    let result = super.call("events", "events(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_events(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("events", "events(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalEvents(): BigInt {
    let result = super.call("getTotalEvents", "getTotalEvents():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalEvents(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalEvents",
      "getTotalEvents():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DeployMysteryEventCall extends ethereum.Call {
  get inputs(): DeployMysteryEventCall__Inputs {
    return new DeployMysteryEventCall__Inputs(this);
  }

  get outputs(): DeployMysteryEventCall__Outputs {
    return new DeployMysteryEventCall__Outputs(this);
  }
}

export class DeployMysteryEventCall__Inputs {
  _call: DeployMysteryEventCall;

  constructor(call: DeployMysteryEventCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get unrevealedURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get premiumNFT(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _nftPurchasedRequired(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get maxSupply(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get baseURI(): string {
    return this._call.inputValues[6].value.toString();
  }

  get clSubscriptionId(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class DeployMysteryEventCall__Outputs {
  _call: DeployMysteryEventCall;

  constructor(call: DeployMysteryEventCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
