// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ERC721TokenCreated extends ethereum.Event {
  get params(): ERC721TokenCreated__Params {
    return new ERC721TokenCreated__Params(this);
  }
}

export class ERC721TokenCreated__Params {
  _event: ERC721TokenCreated;

  constructor(event: ERC721TokenCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GenFactory extends ethereum.SmartContract {
  static bind(address: Address): GenFactory {
    return new GenFactory("GenFactory", address);
  }

  deployGenerativeToken(name: string, symbol: string): Address {
    let result = super.call(
      "deployGenerativeToken",
      "deployGenerativeToken(string,string):(address)",
      [ethereum.Value.fromString(name), ethereum.Value.fromString(symbol)]
    );

    return result[0].toAddress();
  }

  try_deployGenerativeToken(
    name: string,
    symbol: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployGenerativeToken",
      "deployGenerativeToken(string,string):(address)",
      [ethereum.Value.fromString(name), ethereum.Value.fromString(symbol)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalCollection(): BigInt {
    let result = super.call(
      "getTotalCollection",
      "getTotalCollection():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalCollection(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalCollection",
      "getTotalCollection():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  indexToContract(param0: BigInt): Address {
    let result = super.call(
      "indexToContract",
      "indexToContract(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_indexToContract(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "indexToContract",
      "indexToContract(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  indexToOwner(param0: BigInt): Address {
    let result = super.call("indexToOwner", "indexToOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_indexToOwner(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "indexToOwner",
      "indexToOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokens(param0: BigInt): Address {
    let result = super.call("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DeployGenerativeTokenCall extends ethereum.Call {
  get inputs(): DeployGenerativeTokenCall__Inputs {
    return new DeployGenerativeTokenCall__Inputs(this);
  }

  get outputs(): DeployGenerativeTokenCall__Outputs {
    return new DeployGenerativeTokenCall__Outputs(this);
  }
}

export class DeployGenerativeTokenCall__Inputs {
  _call: DeployGenerativeTokenCall;

  constructor(call: DeployGenerativeTokenCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class DeployGenerativeTokenCall__Outputs {
  _call: DeployGenerativeTokenCall;

  constructor(call: DeployGenerativeTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
