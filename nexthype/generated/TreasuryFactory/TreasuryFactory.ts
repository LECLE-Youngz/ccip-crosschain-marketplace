// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LuckyTreasuryCreated extends ethereum.Event {
  get params(): LuckyTreasuryCreated__Params {
    return new LuckyTreasuryCreated__Params(this);
  }
}

export class LuckyTreasuryCreated__Params {
  _event: LuckyTreasuryCreated;

  constructor(event: LuckyTreasuryCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TreasuryFactory extends ethereum.SmartContract {
  static bind(address: Address): TreasuryFactory {
    return new TreasuryFactory("TreasuryFactory", address);
  }

  deployLuckyTreasury(
    _luckyNFT: Address,
    _net: Address,
    _luckyPoint: BigInt,
    _tokenReward: BigInt
  ): Address {
    let result = super.call(
      "deployLuckyTreasury",
      "deployLuckyTreasury(address,address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(_luckyNFT),
        ethereum.Value.fromAddress(_net),
        ethereum.Value.fromUnsignedBigInt(_luckyPoint),
        ethereum.Value.fromUnsignedBigInt(_tokenReward)
      ]
    );

    return result[0].toAddress();
  }

  try_deployLuckyTreasury(
    _luckyNFT: Address,
    _net: Address,
    _luckyPoint: BigInt,
    _tokenReward: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployLuckyTreasury",
      "deployLuckyTreasury(address,address,uint256,uint256):(address)",
      [
        ethereum.Value.fromAddress(_luckyNFT),
        ethereum.Value.fromAddress(_net),
        ethereum.Value.fromUnsignedBigInt(_luckyPoint),
        ethereum.Value.fromUnsignedBigInt(_tokenReward)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  events(param0: BigInt): Address {
    let result = super.call("events", "events(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_events(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("events", "events(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalEvents(): BigInt {
    let result = super.call("getTotalEvents", "getTotalEvents():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalEvents(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalEvents",
      "getTotalEvents():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DeployLuckyTreasuryCall extends ethereum.Call {
  get inputs(): DeployLuckyTreasuryCall__Inputs {
    return new DeployLuckyTreasuryCall__Inputs(this);
  }

  get outputs(): DeployLuckyTreasuryCall__Outputs {
    return new DeployLuckyTreasuryCall__Outputs(this);
  }
}

export class DeployLuckyTreasuryCall__Inputs {
  _call: DeployLuckyTreasuryCall;

  constructor(call: DeployLuckyTreasuryCall) {
    this._call = call;
  }

  get _luckyNFT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _net(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _luckyPoint(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tokenReward(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DeployLuckyTreasuryCall__Outputs {
  _call: DeployLuckyTreasuryCall;

  constructor(call: DeployLuckyTreasuryCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
