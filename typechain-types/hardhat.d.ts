/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "CCIPReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCIPReceiver__factory>;
    getContractFactory(
      name: "IAny2EVMMessageReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAny2EVMMessageReceiver__factory>;
    getContractFactory(
      name: "IRouterClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouterClient__factory>;
    getContractFactory(
      name: "Client",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Client__factory>;
    getContractFactory(
      name: "ConfirmedOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwner__factory>;
    getContractFactory(
      name: "ConfirmedOwnerWithProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal__factory>;
    getContractFactory(
      name: "OwnableInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableInterface__factory>;
    getContractFactory(
      name: "OwnerIsCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerIsCreator__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AutomationBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutomationBase__factory>;
    getContractFactory(
      name: "AutomationCompatible",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutomationCompatible__factory>;
    getContractFactory(
      name: "AutomationCompatibleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutomationCompatibleInterface__factory>;
    getContractFactory(
      name: "FunctionsClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FunctionsClient__factory>;
    getContractFactory(
      name: "IFunctionsClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFunctionsClient__factory>;
    getContractFactory(
      name: "IFunctionsRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFunctionsRouter__factory>;
    getContractFactory(
      name: "IFunctionsSubscriptions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFunctionsSubscriptions__factory>;
    getContractFactory(
      name: "FunctionsRequest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FunctionsRequest__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "VRFCoordinatorV2Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFCoordinatorV2Interface__factory>;
    getContractFactory(
      name: "ConfirmedOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwner__factory>;
    getContractFactory(
      name: "ConfirmedOwnerWithProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "LinkTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkTokenInterface__factory>;
    getContractFactory(
      name: "VRFConsumerBaseV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFConsumerBaseV2__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "DestinationMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DestinationMinter__factory>;
    getContractFactory(
      name: "ERC721PsiMysteryBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721PsiMysteryBox__factory>;
    getContractFactory(
      name: "ExclusiveNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExclusiveNFT__factory>;
    getContractFactory(
      name: "ExclusiveNFTFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExclusiveNFTFactory__factory>;
    getContractFactory(
      name: "GenerativeNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenerativeNFT__factory>;
    getContractFactory(
      name: "GenerativeNFTFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenerativeNFTFactory__factory>;
    getContractFactory(
      name: "LuckyNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LuckyNFT__factory>;
    getContractFactory(
      name: "LuckyNFTFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LuckyNFTFactory__factory>;
    getContractFactory(
      name: "NftMarketplace",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NftMarketplace__factory>;
    getContractFactory(
      name: "MysteryBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MysteryBox__factory>;
    getContractFactory(
      name: "MysteryDropEvent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MysteryDropEvent__factory>;
    getContractFactory(
      name: "MysteryEventFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MysteryEventFactory__factory>;
    getContractFactory(
      name: "NEXTHYPE",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NEXTHYPE__factory>;
    getContractFactory(
      name: "Nexthype",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Nexthype__factory>;
    getContractFactory(
      name: "PremiumFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PremiumFactory__factory>;
    getContractFactory(
      name: "PremiumNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PremiumNFT__factory>;
    getContractFactory(
      name: "SourceMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SourceMinter__factory>;
    getContractFactory(
      name: "VRFv2Consumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFv2Consumer__factory>;
    getContractFactory(
      name: "Withdraw",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Withdraw__factory>;
    getContractFactory(
      name: "ERC721Psi",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Psi__factory>;

    getContractAt(
      name: "CCIPReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CCIPReceiver>;
    getContractAt(
      name: "IAny2EVMMessageReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAny2EVMMessageReceiver>;
    getContractAt(
      name: "IRouterClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouterClient>;
    getContractAt(
      name: "Client",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Client>;
    getContractAt(
      name: "ConfirmedOwner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwner>;
    getContractAt(
      name: "ConfirmedOwnerWithProposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    getContractAt(
      name: "OwnableInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableInterface>;
    getContractAt(
      name: "OwnerIsCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerIsCreator>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AutomationBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutomationBase>;
    getContractAt(
      name: "AutomationCompatible",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutomationCompatible>;
    getContractAt(
      name: "AutomationCompatibleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutomationCompatibleInterface>;
    getContractAt(
      name: "FunctionsClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FunctionsClient>;
    getContractAt(
      name: "IFunctionsClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFunctionsClient>;
    getContractAt(
      name: "IFunctionsRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFunctionsRouter>;
    getContractAt(
      name: "IFunctionsSubscriptions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFunctionsSubscriptions>;
    getContractAt(
      name: "FunctionsRequest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FunctionsRequest>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "VRFCoordinatorV2Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFCoordinatorV2Interface>;
    getContractAt(
      name: "ConfirmedOwner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwner>;
    getContractAt(
      name: "ConfirmedOwnerWithProposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    getContractAt(
      name: "IOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "LinkTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkTokenInterface>;
    getContractAt(
      name: "VRFConsumerBaseV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFConsumerBaseV2>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "DestinationMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DestinationMinter>;
    getContractAt(
      name: "ERC721PsiMysteryBox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721PsiMysteryBox>;
    getContractAt(
      name: "ExclusiveNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExclusiveNFT>;
    getContractAt(
      name: "ExclusiveNFTFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExclusiveNFTFactory>;
    getContractAt(
      name: "GenerativeNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GenerativeNFT>;
    getContractAt(
      name: "GenerativeNFTFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GenerativeNFTFactory>;
    getContractAt(
      name: "LuckyNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LuckyNFT>;
    getContractAt(
      name: "LuckyNFTFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LuckyNFTFactory>;
    getContractAt(
      name: "NftMarketplace",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NftMarketplace>;
    getContractAt(
      name: "MysteryBox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MysteryBox>;
    getContractAt(
      name: "MysteryDropEvent",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MysteryDropEvent>;
    getContractAt(
      name: "MysteryEventFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MysteryEventFactory>;
    getContractAt(
      name: "NEXTHYPE",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NEXTHYPE>;
    getContractAt(
      name: "Nexthype",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Nexthype>;
    getContractAt(
      name: "PremiumFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PremiumFactory>;
    getContractAt(
      name: "PremiumNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PremiumNFT>;
    getContractAt(
      name: "SourceMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SourceMinter>;
    getContractAt(
      name: "VRFv2Consumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFv2Consumer>;
    getContractAt(
      name: "Withdraw",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Withdraw>;
    getContractAt(
      name: "ERC721Psi",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Psi>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
