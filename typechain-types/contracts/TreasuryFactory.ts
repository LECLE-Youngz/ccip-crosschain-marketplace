/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TreasuryFactoryInterface extends utils.Interface {
  functions: {
    "deployLuckyTreasury(address,address,uint256,uint256)": FunctionFragment;
    "events(uint256)": FunctionFragment;
    "getTotalEvents()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "deployLuckyTreasury" | "events" | "getTotalEvents"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployLuckyTreasury",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalEvents",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "deployLuckyTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalEvents",
    data: BytesLike
  ): Result;

  events: {
    "LuckyTreasuryCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LuckyTreasuryCreated"): EventFragment;
}

export interface LuckyTreasuryCreatedEventObject {
  owner: string;
  tokenAddress: string;
}
export type LuckyTreasuryCreatedEvent = TypedEvent<
  [string, string],
  LuckyTreasuryCreatedEventObject
>;

export type LuckyTreasuryCreatedEventFilter =
  TypedEventFilter<LuckyTreasuryCreatedEvent>;

export interface TreasuryFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TreasuryFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployLuckyTreasury(
      _luckyNFT: PromiseOrValue<string>,
      _net: PromiseOrValue<string>,
      _luckyPoint: PromiseOrValue<BigNumberish>,
      _tokenReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTotalEvents(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;
  };

  deployLuckyTreasury(
    _luckyNFT: PromiseOrValue<string>,
    _net: PromiseOrValue<string>,
    _luckyPoint: PromiseOrValue<BigNumberish>,
    _tokenReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  events(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTotalEvents(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    deployLuckyTreasury(
      _luckyNFT: PromiseOrValue<string>,
      _net: PromiseOrValue<string>,
      _luckyPoint: PromiseOrValue<BigNumberish>,
      _tokenReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTotalEvents(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LuckyTreasuryCreated(address,address)"(
      owner?: null,
      tokenAddress?: null
    ): LuckyTreasuryCreatedEventFilter;
    LuckyTreasuryCreated(
      owner?: null,
      tokenAddress?: null
    ): LuckyTreasuryCreatedEventFilter;
  };

  estimateGas: {
    deployLuckyTreasury(
      _luckyNFT: PromiseOrValue<string>,
      _net: PromiseOrValue<string>,
      _luckyPoint: PromiseOrValue<BigNumberish>,
      _tokenReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalEvents(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deployLuckyTreasury(
      _luckyNFT: PromiseOrValue<string>,
      _net: PromiseOrValue<string>,
      _luckyPoint: PromiseOrValue<BigNumberish>,
      _tokenReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    events(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
