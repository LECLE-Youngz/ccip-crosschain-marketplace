/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GenerativeNFTFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployGenerativeToken"
      | "getTotalCollection"
      | "indexToContract"
      | "indexToOwner"
      | "tokens"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ERC721TokenCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "deployGenerativeToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexToContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexToOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployGenerativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
}

export namespace ERC721TokenCreatedEvent {
  export type InputTuple = [owner: AddressLike, tokenAddress: AddressLike];
  export type OutputTuple = [owner: string, tokenAddress: string];
  export interface OutputObject {
    owner: string;
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GenerativeNFTFactory extends BaseContract {
  connect(runner?: ContractRunner | null): GenerativeNFTFactory;
  waitForDeployment(): Promise<this>;

  interface: GenerativeNFTFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployGenerativeToken: TypedContractMethod<
    [name: string, symbol: string],
    [string],
    "nonpayable"
  >;

  getTotalCollection: TypedContractMethod<[], [bigint], "view">;

  indexToContract: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  indexToOwner: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  tokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployGenerativeToken"
  ): TypedContractMethod<
    [name: string, symbol: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTotalCollection"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "indexToContract"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "indexToOwner"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "ERC721TokenCreated"
  ): TypedContractEvent<
    ERC721TokenCreatedEvent.InputTuple,
    ERC721TokenCreatedEvent.OutputTuple,
    ERC721TokenCreatedEvent.OutputObject
  >;

  filters: {
    "ERC721TokenCreated(address,address)": TypedContractEvent<
      ERC721TokenCreatedEvent.InputTuple,
      ERC721TokenCreatedEvent.OutputTuple,
      ERC721TokenCreatedEvent.OutputObject
    >;
    ERC721TokenCreated: TypedContractEvent<
      ERC721TokenCreatedEvent.InputTuple,
      ERC721TokenCreatedEvent.OutputTuple,
      ERC721TokenCreatedEvent.OutputObject
    >;
  };
}
