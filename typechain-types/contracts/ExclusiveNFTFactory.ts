/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ExclusiveNFTFactoryInterface extends utils.Interface {
  functions: {
    "deployExclusiveToken(string,string,string,address)": FunctionFragment;
    "getTotalCollection()": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deployExclusiveToken"
      | "getTotalCollection"
      | "tokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployExclusiveToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployExclusiveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;

  events: {
    "ExclusiveNFTCreated(address,address,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExclusiveNFTCreated"): EventFragment;
}

export interface ExclusiveNFTCreatedEventObject {
  owner: string;
  tokenAddress: string;
  unrevealURI: string;
  premiumNFT: string;
}
export type ExclusiveNFTCreatedEvent = TypedEvent<
  [string, string, string, string],
  ExclusiveNFTCreatedEventObject
>;

export type ExclusiveNFTCreatedEventFilter =
  TypedEventFilter<ExclusiveNFTCreatedEvent>;

export interface ExclusiveNFTFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExclusiveNFTFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployExclusiveToken(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      unrevealURI: PromiseOrValue<string>,
      premiumNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTotalCollection(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  deployExclusiveToken(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    unrevealURI: PromiseOrValue<string>,
    premiumNFT: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTotalCollection(overrides?: CallOverrides): Promise<BigNumber>;

  tokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    deployExclusiveToken(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      unrevealURI: PromiseOrValue<string>,
      premiumNFT: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTotalCollection(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ExclusiveNFTCreated(address,address,string,address)"(
      owner?: null,
      tokenAddress?: null,
      unrevealURI?: null,
      premiumNFT?: null
    ): ExclusiveNFTCreatedEventFilter;
    ExclusiveNFTCreated(
      owner?: null,
      tokenAddress?: null,
      unrevealURI?: null,
      premiumNFT?: null
    ): ExclusiveNFTCreatedEventFilter;
  };

  estimateGas: {
    deployExclusiveToken(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      unrevealURI: PromiseOrValue<string>,
      premiumNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTotalCollection(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployExclusiveToken(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      unrevealURI: PromiseOrValue<string>,
      premiumNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTotalCollection(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
